subprojects {
	apply plugin: 'java'
	apply plugin: 'findbugs'
	apply plugin: 'pmd'

	repositories {
		mavenLocal()
		flatDir name: 'localRepository', dirs: '../lib'
		mavenCentral()
	}

	dependencies {
		compile group: 'com.h2database', name: 'h2', version: '1.3.155'
		compile group: 'org.antlr', name: 'stringtemplate', version: '3.2.1'
		compile group: 'com.google.guava', name: 'guava', version: 'r09'
	}

	sourceSets {
		main {
			java {
				srcDir 'src'
				exclude '**/empty.txt'
			}
			resources {
				srcDir 'resources'
				exclude '**/empty.txt'
			}
		}
	}

	findbugs {
		ignoreFailures = true
	}
	tasks.withType(FindBugs) {
		reports {
			xml.enabled = false
			html.enabled = true
		}
	}
	pmd {
		ignoreFailures = true
	}
}

project(':source:deckbuilder') {
	dependencies {
		compile project(':source:arcane')
		compile project(':source:rulesviewer')
	}
	jar.manifest.from("../arcane/manifest.deckbuilder")
	archivesBaseName = "DeckBuilder"
}

project(':source:rulesviewer') {
	dependencies {
		compile project(':source:arcane')
	}
	jar.manifest.from("../arcane/manifest.rulesviewer")
	archivesBaseName = "RulesViewer"
}

project(':source:jgn') {
	dependencies {
		compile group: 'junit', name: 'junit', version: '4.8.2'
		compile files("lib/magicbeans.jar")
	}
}

project(':source:network') {
	dependencies {
		compile project(':source:arcane')
		compile project(':source:jgn')
	}
}

project(':source:client') {
	dependencies {
		compile project(':source:network')
		compile project(':source:rulesviewer')
	}
	jar.manifest.from("../arcane/manifest.client")
	archivesBaseName = "Client"
}

project(':source:server') {
	dependencies {
		compile project(':source:network')
	}
	jar.manifest.from("../arcane/manifest.server")
	archivesBaseName = "Server"
}

project(':source:test') {
	dependencies {
		compile project(':source:client')
		compile project(':source:server')
	}
	jar.manifest.from("../arcane/manifest.test")
}

task dists(dependsOn: subprojects.jar) {
	List execJars = [':source:rulesviewer', ':source:deckbuilder', ':source:client', ':source:server', ':source:test']

	copy {
		from subprojects.configurations.runtime
		into file("../lib")
		execJars.size().times {exclude "${project(execJars[it]).archivesBaseName}.jar"}
	}

	execJars.each {
		String projectName -> copy {
			from project(projectName).libsDir
			into file("..")
		}
	}
}