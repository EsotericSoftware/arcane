subprojects {
	apply plugin: 'java'

	def findbugsHome = "../../java-tools/findbugs"

	repositories {
		mavenLocal()
		flatDir name: 'localRepository', dirs: '../lib'
		flatDir name: 'pmdRepo', dirs: '../../java-tools/pmd/lib'
		flatDir name: 'ecjRepo', dirs: '../../java-tools/ecj'
		flatDir name: 'findbugsRepo', dirs: "${findbugsHome}/lib"
		mavenCentral()
	}

	//
	// Configure ecj as java compiler
	//

	configurations {
			jdt
	}

	dependencies {
			jdt "org.eclipse.jdt:ecj:3.6.2"
	}

	warnings = [
			'allDeprecation',
			'assertIdentifier',
			'charConcat',
			'compareIdentical',
			'conditionAssign',
			'constructorName',
			'hashCode',
	]

	compileJava {
			options.compiler = "org.eclipse.jdt.core.JDTCompilerAdapter"
			options.define(compilerArgs: ['-enableJavadoc', "-warn:${warnings.join(',')}"])
			doFirst {
					ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
					configurations.jdt.each { File f ->
							antClassLoader.addURL(f.toURI().toURL())
					}
			}
	}

	dependencies {
		compile group: 'com.h2database', name: 'h2', version: '1.3.155'
		compile group: 'org.antlr', name: 'stringtemplate', version: '3.2.1'
		compile group: 'com.google.guava', name: 'guava', version: 'r09'
	}

	sourceSets {
		main {
			java {
				srcDir 'src'
				exclude '**/empty.txt'
			}
			resources {
				srcDir 'resources'
				exclude '**/empty.txt'
			}
		}
	}

	///
	// pmd
	//

	configurations {
		pmdConf
	}

	dependencies {
		pmdConf 'pmd:pmd:4.2.5'
	}

	task pmd << {
		println 'Running PMD static code analysis'
		ant {
			taskdef(name:'pmd', classname:'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmdConf.asPath)

			pmd(shortFilenames:'true', failonruleviolation:'false', rulesetfiles:'rulesets/basic.xml') {
				formatter(type:'text', toConsole:'true')
				fileset(dir: "src") {
					include(name: '**/*.java')
				}
			}
		}
	}

	///
	// findbugs
	//

	configurations {
		findbugsConf
	}

	dependencies {
		findbugsConf 'net.sourceforge.findbugs:findbugs:1.3.2', 'net.sourceforge.findbugs:findbugs-ant:1.3.2'
	}

	task findbugs << {
		println 'Running findbugs static code analysis'
		ant {
			taskdef(name:'findbugs', classname:'edu.umd.cs.findbugs.anttask.FindBugsTask', classpath: configurations.findbugsConf.asPath)

			findbugs(home: "../${findbugsHome}", output:'xml', outputFile: "${buildDir}/findbugs.xml") {
					sourcePath(path: 'src')
					"class"(location: "${libsDir}/${jar.archiveName}")
			}
		}
	}
}

project(':deckbuilder') {
	dependencies {
		compile project(':arcane')
		compile project(':rulesviewer')
	}
	jar.manifest.from("../arcane/manifest.deckbuilder")
	archivesBaseName = "DeckBuilder"
}

project(':rulesviewer') {
	dependencies {
		compile project(':arcane')
	}
	jar.manifest.from("../arcane/manifest.rulesviewer")
	archivesBaseName = "RulesViewer"
}

project(':jgn') {
	dependencies {
		compile group: 'junit', name: 'junit', version: '4.8.2'
		compile files("lib/magicbeans.jar")
	}
}

project(':network') {
	dependencies {
		compile project(':arcane')
		compile project(':jgn')
	}
}

project(':client') {
	dependencies {
		compile project(':network')
		compile project(':rulesviewer')
	}
	jar.manifest.from("../arcane/manifest.client")
	archivesBaseName = "Client"
}

project(':server') {
	dependencies {
		compile project(':network')
	}
	jar.manifest.from("../arcane/manifest.server")
	archivesBaseName = "Server"
}

project(':test') {
	dependencies {
		compile project(':client')
		compile project(':server')
	}
	jar.manifest.from("../arcane/manifest.test")
}

dependsOnChildren()

task dists(dependsOn: subprojects.jar) {
	List execJars = [':rulesviewer', ':deckbuilder', ':client', ':server', ':test']

	copy {
		from subprojects.configurations.runtime
		into file("../lib")
		execJars.size().times {exclude "${project(execJars[it]).archivesBaseName}.jar"}
	}

	execJars.each {
		String projectName -> copy {
			from project(projectName).libsDir
			into file("..")
		}
	}
}